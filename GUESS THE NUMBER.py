GUESS THE NUMBER: 

http://www.codeskulptor.org/#user11_Gg2WnlLmR8Gqc0M.py

http://www.codeskulptor.org/#examples-guess_the_number_template.py

http://www.codeskulptor.org/#examples-gtn_testing_template.py

Code Clinic thread for "Guess the number"
https://class.coursera.org/interactivepython-002/forum/thread?thread_id=1625

Tip #1 - Common issues from fall 2012

Remember that the input handler get_input(guess) in the program template takes a parameter guess that is a string. Your first statement in get_input should convert guess into an integer using the function int(guess).
You should not use a While loop in this mini-project. If you are tempted to use one, stop and think about how input fields work. Each call to get_input advances the game by one guess, not lots of guesses.


Tip #2 - testing get_input() 

The key function in "Guess the number" is input_guess(), the event handler for your input field. It takes a number (as as string, compares it to the global variable containing the secret number, and prints out one step of the game. To help you determine whether you implementation of input_guess() is working, we have prepared the following testing template with the same structure as the practice exercises. 

Paste your implementation of "Guess the number" into the template below and run the template. The bottom of the template contains a sequence of calls to input_guess() for three games of "Guess the number". Uncomment each sequence of calls and check whether the output in the console matches that provided in the comments below. Note that your output doesn't have to be identical, just of a similar form. If the global variable containing your secret number is not called secret_number, you should change the assignment in the testing code to use your variable name for the secret number. 

http://www.codeskulptor.org/#examples-gtn_testing_template.py 


Tip #3 - maintaining the current guess range and starting/restarting your game 

For the last two steps, you need to vary the range of your game. I suggest that you create a global variable (call it num_range) that contains the range for the current game. Now, your button handlers can simply set num_range appropriately and call a function init() that restarts your game. 

This function init() should initializes all of the appropriate global variables as well as print out any necessary messages when you start/restart a game. You should call init() in four places: in each of the two buttons handlers, after a completed game in input_guess() and before frame.start() to initialize the first game. 


Tip #4 - limiting the number of global variables

Many of the students that sought help in the Code Clinic in fall 2012 made two copies of each of their global variables, one for each range. For example, they might have had secret_number100 and secret_number1000. This design choice ignored the suggested mini-project development process and makes your code very complex. Just keep a single copy of each global variable and initialize it correctly based on the current range of guesses (also stored as a global variable). This choice will make your code much simpler.

*******************************************************************************

Mini-project description — “Guess the number” game

One of the simplest two-player games is “Guess the number”. The first player thinks of a secret number in some known range while the second player attempts to guess the number. After each guess, the first player answers either “Higher”, “Lower” or “Correct!” depending on whether the secret number is higher, lower or equal to the guess. In this project, you will build a simple interactive program in Python where the computer will take the role of the first player while you play as the second player.

You will interact with your program using an input field and several buttons. For this project, we will ignore the canvas and print the computer's responses in the console. Building an initial version of your project that prints information in the console is a development strategy that you should use in later projects as well. Focusing on getting the logic of the program correct before trying to make it display the information in some “nice” way on the canvas usually saves lots of time since debugging logic errors in graphical output can be tricky.


Mini-project development process

We have provided a basic template for this mini-project here . Our suggested development strategy for the basic version of “Guess the number” is:

Decide on a set of global variables that contain the state of the game. For example, one obvious choice is the secret number that has been generated by the program. You will need other global variables, especially to accomodate later extensions to the basic game.

Figure out how to generate a random secret number in a given range, low to high. When discussing ranges, we will follow the standard Python convention of including the low end of the range and excluding the high end of the range, which can be expressed mathematically as [low, high). So, [0, 3) means all of the numbers starting at 0 up to, but not including 3. In other words 0, 1, and 2. We suggest using the range [0, 100) in your first implementation. Hint: look at the functions in the random module to figure out how to easily select such a random number. We suggest testing this in a separate CodeSkulptor tab before adding code to your project.

Figure out how to create an input text box using the simplegui module. You will use this input to get the guess from the user. For all variants of the game, this input field should always be active (in other words, a game should always be in progress). Again, test in a separate CodeSkulptor tab before adding code to your project.

Write the event handler input_guess(guess) that takes the input guess, compares it to the secret number and prints out the appropriate response. Remember that guess is a string so you will need to convert it into a number before testing it against the secret number. Hint: We have showed you how to convert strings to numbers in the lectures.

Test your code by playing multiple games of “Guess the number” with a fixed range. At this point, you will need to re-run your program between each game (using the CodeSkulptor “Run” button).

From this minimal working version of “Guess the number”, the rest of this project consists of adding extra functionality to your project. There are two improvements that you will need to make to get full credit:

Using function(s) in the simplegui module, add buttons to restart the game so that you don't need to repeatedly click “Run” in CodeSkulptor to play multiple games. You should add two buttons: “Range: 0 - 100” and “Range: 0 - 1000” that allow the player to choose different ranges for the secret number. Using either of these buttons should restart the game and print out an appropriate message. They should work at any time during the game.

As you play “Guess the number”, you might notice that a good strategy is to maintain an interval that consists of the highest guess that is “Lower” than the secret number and the lowest guess that is “Higher” than the secret number. A good choice for the next guess is the number that is the average of these two numbers. The answer for this new guess then allows you to figure a new interval that contains the secret number and that is half as large. For example, if the secret number is in the range [0, 100), it is a good idea to guess 50. If the answer is "Higher", the secret number must be in the range [51, 100). It is then a good idea to guess 75 and so on. This technique of successively narrowing the range corresponds to a well-known computer algorithm known as binary search.

Your final addition to “Guess the number” will be to restrict the player to a limited number of guesses. After each guess, your program should include in its output the number of remaining guesses. Once the player has used up those guesses, they lose, the game prints out an appropriate message, and a new game immediately starts.

Since the strategy above for playing “Guess the number” approximately halves the range of possible secret numbers after each guess, any secret number in the range [low, high) can always be found in at most n guesses where n is the smallest integer such that 2 ** n >= high - low + 1. For the range [0, 100), n is seven. For the range [0, 1000), n is ten. Your program can simply set the number of allowed guess to seven when the range is [0, 100) or ten when the range is [0, 1000). For more of a challenge, you may compute n from low and high using the functions math.log and math.ceil in the math module.

When your program starts, the game should immediately begin in range [0, 100). When the game ends (because the player either wins or runs out of guesses), a new game with the same range as the last one should immediately begin. Whenever the player clicks one of the range buttons, the current game should stop and a new game with the selected range should begin.

Grading rubric — 11 pts total (scaled to 100 pts)

Your peers will assess your mini-project according to the rubric given below. To guide you in determining whether your project satisfies each item in the rubric, please consult the video that demonstrates our implementation of “Guess the number”. Small deviations from the textual output of our implementation are fine. You should avoid potentially confusing deviations (such as printing “Too high” or “Too low” instead of “Lower” and “Higher”). Whether moderate deviations satisfy an item of the grading rubric is at your peers' discretion during their assessment.

Here is a break down of the scoring:

1 pt — The game starts immediately when the “Run” button in CodeSkulptor is pressed.

1 pt — A game is always in progress.

1 pt — The game reads guess from the input field and correctly prints it out.

3 pts — The game correctly plays “Guess the number” with the range [0, 100) and prints understandable output messages to the console. Play three complete games: 1 pt for each correct game.

2 pts — The game includes two buttons that allow the user to select the range [0, 100) or the range [0, 1000) for the secret number. These buttons correctly change the range and print an appropriate message. (1 pt per button.)

2 pts — The game restricts the player to a finite number of guesses and correctly terminates the game when these guesses are exhausted. Award 1 pt if the number of remaining guesses is printed, but the game does not terminate correctly.

1 pt — The game varies the number of allowed guesses based on the range of the secret number — seven guesses for range [0, 100), ten guesses for range [0, 1000).

To help aid you in gauging what a full credit project might look like, the video lecture on the “Guess the number” project includes a demonstration of our implementation of this project. You do not need to validate that the input number is in the correct range. (For this game, that responsibility should fall on the player.)
